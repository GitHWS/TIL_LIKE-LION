/* reset */

body,p, ul{
  /* 명시적으로 보이기 위해 initial이나 0을 속성값 사용 */
  margin:0; 
  padding:0;
}

body{
  background-image: url(./images/background.gif);
  background-position: center;
  background-attachment: fixed;
  background-repeat: no-repeat;
  background-size: cover;

}

h1, h2{
  /* inherit : 부모에게 값을 상속받겠다. 상속이 되는 프로퍼티는 검색을 하면 여부가 나옴(mdn) */
  margin: 0;;
  font-size:inherit; 
  font-weight: initial;
}

li{
  list-style: none;
}

a{
  text-decoration: inherit;
  color:inherit;
}


/* main */

div{
  /* 대표적인 박스모델 프로퍼티 5가지 */

  /* 부모 너비 기준으로 가득 참 */
  /* 이러한 속성이 없다면 width는 기본값이 auto(initial밸류)로 적용된 상태임 */
  /* 같은 auto의 값이라도 실질적인 값은 다르다. */
  margin: 0 auto;
  
  /* height:auto는 자식 기준(자식 요소가 없다면 콘텐츠)으로 높이 자동 조절 */
  /* height:400px; */

  /* 요소의 바깥 여백 */
  /* margin: 20px; */

  /* 요소의 안쪽 여백 */
  /* padding:100px; */

  /* 바깥의 테두리 선 : 굵기 선의 스타일 컬러 */
  /* border:100px solid red; */
}

.wrapper{
  background-color: #ddd;
  width:800px;
  margin:100px auto;
}

/* header : 로고나 메뉴 같이 중요한 요소가 들어감 */

/* 클래스 셀렉터의 표시 div.header : 앞의 태그(div)는 생략하는 것이 가능하다. */
.header{
  background-image: url(./images/cover04.png);
  background-size: cover;
  height: auto;
  text-align: center;
  color:#fff;
  padding:50px 0;
}

.header img.profile{
  border:10px solid #fff;
  border-radius: 200px / 50px;
  /* 200px / 20px */
}

/* 하위 선택자(descendant selector) : 태그와 태그 사이의 공백을 통해 하위의 태그를 선택하는 것*/
/* 태그와 태그 사이에 들어가는 연산자(+ ~ >) : 콤비네이터(결합자) */
.header h1 {
  font-size: 100px;
}

.header p{
  /* fit-content : content의 넓이만큼 값을 채움, IE는 지원불가 */
  /* width:fit-content; */
  border-top:4px solid;
  display: inline-block;
  padding: 10px 20px;
  margin:20px auto;
}

.contents{
  padding:30px;
}

.section{
  background-image: url(./images/icon-information.png);
  background-repeat: no-repeat;
  /* 포지션을 넣어줄때 이렇게 해도 됨 */
  background-position: right 30px center;
  background-color: white;
  padding: 20px;
  margin-bottom: 20px;
}

.section:last-child{
  margin-bottom: 0;
}

.section.skills{
  background-image: url(./images/icon-skills.png);
}

.section h2{
  color:salmon;
  font-size:20px;
  margin-bottom: 20px;
}

.list li{
  border-left: 5px solid #ddd;
  padding : 2px 10px;
}

.list li:hover{
  border-color:pink;
  color:pink;
}

.footer{
  background-color: #f4f4f4;
  text-align: center;
  padding:20px 0;
}

.icon{
  /* .icon 태그 간의 중간 여백은 마진/패딩도 아닌 코드 간의 엔터로 인해 생긴 단순한 띄어쓰기이다. 폰트 사이즈에 비례하여 커진다.(em단위) */
  /* 인라인(텍스트)는 width, heihgt 개념이 존재하지 않는다. 길이라는 개념이 자연스럽다. */
  /* 인라인에 마진은 가로만 적용이 됨 */
  /* display: inline-block;은 텍스트의 베이스라인을 기준으로 나열이 된다. */
  display: inline-block;
  width:48px;
  height:48px;
  border-radius: 30px;
  border:2px solid #ddd;
  color:white;
  /* IR 기법 */
  text-indent: -9999px;
  /* 이미지 스프라이트 기법 : 웹 성능을 위해 함 */
  background-image: url(./images/icons.png);
  background-size: 144px 96px;
}

.icon.github{
  background-color: black;
  background-position: left top;
}
.icon.facebook{
  background-color: dodgerblue;
  background-position: center top;
}
.icon.email{
  background-color: orangered;
  background-position: right top;
}

/* 가상선택자 pseudo class */
.icon:hover{
  background-position-y: bottom;
}

/* TIP */

/* 디자인의 박스 모델을 나눌 때 크게 크게 봐야함! */
/* 타입 셀렉터(태그)는 되도록이면 reset할때만 사용하는 것이 좋다. 전체 태그를 다 바꾸기 때문에 리스크가 큼 */
/* 각각의 프로퍼티에 따라 initial의 값은 다르다. 왜냐하면 initial의 값은 적용하는 프로퍼티의 디폴트값! */
/* 속성를 적용하지 않으면 자동적으로 디폴특값이 적용이 된다/ */
/* 부모의 요소는 width height 의 고정값을 주지 않는다. 왜냐하면 자식 요소만큼 크기가 늘어나니까! */
/* img는 내가 표현하고 싶은 컨텐츠인 경우에 넣고. background-image는 단순히 데코레이션, 꾸미는 용도의 이미지 삽입일 때 활용한다. 프로필 사진은 내가 표현하고 싶은 (전달하고 싶은) 컨텐츠임으로 img를 활용했음 */
/* 각 property의 initial값(디폴트값)은 태그마다 다르다. margin의 initial의 값은 0, width의 initial의 값은 auto */
/* em(앰)은 부모의 폰트사이즈의 배수 */
/* h1의 폰트 사이즈가 2em인데 32px로 표현하지 않고 2em으로 하는게 브라우저마다 기본값이 달라서임? */
/* 원래 상속이 지원되는 속성은 초기화 해줄 때 inherit 키워드를 사용하고 상속이 지원이 안된다면 initial 사용 */
/* 상속의 위치는 개발자로 볼 수 있다. */
/* 절대 하면 안되는 것 : 타입 셀렉터를 쓰는 것 */
/* 속성값 unset : inherit이 되는 것은 inherit으로 해주고 안되면 initia로 해줌 */

/* 
width: 100%와 width:auto는 같은가? 
둘 다 부모의 사용 가능한 영역을 채우는 면에서는 똑같다. 하지만 width:100% 상황에서 마진을 주면 마진만큼 '추가'가 된다. 하지만 auto는 마진을 포함해서 100%로 계산한다.
*/

/* 
text-align : center는 인라인 요소(콘탠츠 포함)가 부모의 기준으로 중앙정렬하는 것이고 태그 자체가 이동하는 것이 아님, margin:0 auto는 블록 요소 자체를 중앙정렬하는 것임
*/

/* 위아래로 있는 블록 레벨간의 상하단 마진은 겹치게 설계해놓았다. 이를 마진 병합 현상이라고 함, 이 현상은 순수한 블럭 레벨의 요소에게만 적용이 됨*/

/* 작업의 순서는 먼저 콘텐츠의 덩어리를 나누고 안쪽에 있는 덩어리를 나누는 것(백그라운드 설정)을 우선적으로 함
  다음은 내부 태그의 덩어리를 파악하여 처리
*/

/*
header/footer는 한번 만들면 계속 그 자리에 있기 때문에 먼저 만드는 것이 우선이다(취향따라)
코드를 한번에 써놓고 고치는건 마지막에 수정하기 힘들기 때문에 최소한의 마크업하고 스타일 적용/확인 하는 것으로 하는 것이 좋다
*/

/* 셀럭터가 구체적일수록 스타일 적용에 우선순위가 올라간다. */
/* 스페시파이 트리 :  아이디 3 클래스 2 타입 셀렉터 1점  동점이면 아래 것이 적용됨 */
/* https://byunki.tistory.com/14 */
/* 마진 겹침 현상
https://paullabworkspace.notion.site/7-CSS-Box-Model-01074cd99c08490ea2663ff7113b934a#9da4264664bb486bae929164d66f00ab
*/

/* id는 유일하게 하나만 사용할 수 있기 때문에 스타일 속성으로는 올바르지 못함, 스타일은 되도록 클래스를 사용 */

/* 
1. 전체적인 덩어리를 먼저 나눠라. 컨텐츠부터 막 서둘러 넣지말아요~
2. 구분을 위해 각각 시각적으로 힌트를 줘야한다. 백그라운드컬러를 주고 이미지를 넣는 등
3. 레이아웃 관련 스타일만 적용한다. 안에 내용물을 막 넣기 이전에 공간부터 마련한다. 기본 margin / padding 
4. 요리 재료(요소, 타입셀렉터 이용)부터 먼저 해주자. 초기화를 통해 가장 담백한 상태(reset)로 만들기 ~ inherit, initial(IE박멸) / margin 0 padding 0
5. 이후부터 class를 사용하여 섬세한 작업 시작~
*/